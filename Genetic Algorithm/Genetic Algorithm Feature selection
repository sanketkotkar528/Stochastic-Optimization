# -*- coding: utf-8 -*-
"""
Created on Mon Sep 28 15:53:05 2020

@author: Sanket Kotkar

Genetic algorithm feature selection - Breast cancer using fitness value
"""
#=========================================================================================================================#
# Importing the libraries

import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,matthews_corrcoef
import copy

#%%  Loading the data
Data = pd.read_csv("D:/Dataset/Breast_cancer/Data.csv")

# Spliting the data into dependent and independent variables
X = Data.drop(['id','diagnosis'], axis =1)
Y = Data['diagnosis']

#=======================================================================================================================#  
# Creating the cromosomes

PopLn = 10                                                                   # Population size
Pc = 0.7                                                                     # Crossover probability
Pm = 1/PopLn                                                                 # Mutation Probability
bits = len(X.columns)                                                        # Length of cromosomes
Max_itr = 50

Cromosomes= []
for i in range(PopLn):
    a = np.random.choice([0,1],size = len(X.columns))
    Cromosomes.append(a)
    
#========================================================================================================================#

# Spliting the data into train and test data sets
X_Train,X_Test,Y_Train,Y_Test = train_test_split(X,Y,test_size = 0.2, random_state = 42 )


Best_MCC = []
Atribute = []


for j in range(Max_itr):
    MCC = []
    FIT = []
    for i in range(len(Cromosomes)):
        I = np.where(Cromosomes[i]== 1)[0]
        
        Model_1 = RandomForestClassifier()                                   # Building the randomforest basic model
        Model_1.fit(X_Train.iloc[:,I],Y_Train)                               # Training in the data set
        Y_Pred_1 = Model_1.predict(X_Test.iloc[:,I])                         # Predicting the results
        mcc = matthews_corrcoef(Y_Test,Y_Pred_1)                             # Calculating MCC
        MCC.append(mcc)                                                      # Storing the MCC value
        
        #=================== fitness function ==============#
        fit = []
        for j in np.linspace(0.2,1,5):
            fitness = mcc - (j*len(I)/len(X.columns))
            fit.append(fitness)
            F = np.max(fit)
        FIT.append(F)
        
    #===================== Tournament selection =================#
    Selected_cromo = []
    R = np.random.randint(0,10,size =(len(Cromosomes),2))                   # Creating random sets of indexes
    for i in range(len(Cromosomes)):
        A = max(MCC[R1[i][0]],MCC[R1[i][1]])                                # Selecting the best MCC index among 2 random MCC
        Index = MCC.index(A)                                                # Extracting the index of best MCC
        B = Cromosomes[Index]                                               # Extracting the best cromosome according to best MCC
        Selected_cromo.append(B)                                            # Storing all best cromosomes
        
    #==================== Crossover =======================# 
    Crooover = []
    R2 = np.random.randint(0,10,size = (int(len(Cromosomes)/2),2))
    for i in range(len(R2)):
        C1 = Selected_cromo[R2[i][0]]                                        # Cromosomes for crossover
        C2 = Selected_cromo[R2[i][1]]
        r = np.random.uniform(0,1,size=(1,len(X.columns)))
        if np.any( r < Pc ):
            z = r[r<Pc]
            r.tolist() ; z.tolist()
            v = np.where( r == z[0])
            w = v[1][0]
            Ori_C1 = C1.copy()
            C1[w+1:] = C2[w+1:]
            C2[w+1:] = Ori_C1[w+1:]
            Crossover.append(C1)
            Crossover.append(C2)
        else:
            C1 = C1 ; C2 = C2
            Crossover.append(C1)
            Crossover.append(C2)
    Crossover_copy = copy.deepcopy(Crossover)
    
    #=================== Mutation =========================# 
    for i in range(len(Cromosomes)):
        r = np.random.uniform(0,1,size=(1,bits))
        if np.any(r < Pm):
            z = r[r < Pm]
            r.tolist(); z.tolist()
            v= np.where(r==z[0])
            w= v[1][0]
            if Crossover[i][w] == 1:
                Crossover[i][w] = 0
            else:
                Crossover[i][w] = 1
        else:   
            Crossover[i] = Crossover[i]
        
    
    #==================== Testing ==========================# 
    
    MCC_Test = []
    FIT_Test = []
    CV = Crossover
    for i in range(len(CV)):
        I = np.where(CV[i]==1)[0]
        
        Model_2 = RandomForestClassifier()              # Building the randomforest basic model
        Model_2.fit(X_Train.iloc[:,I],Y_Train)          # Training in the data set
        Y_Pred_2 = Model_2.predict(X_Test.iloc[:,I])    # Predicting the results
        mcc_T = matthews_corrcoef(Y_Test,Y_Pred_2)      # Calculating MCC
        MCC_Test.append(mcc_T)                          # Storing the MCC value
        
        #================== Fitness function ======================#
        fit_Test = []
        for j in np.linspace(0.2,1,5):
            fitness_Test = mcc - (j*len(I)/len(X.columns))
            fit_Test.append(fitness_Test)
            F_Test = np.max(fit_Test)
        FIT_Test.append(F_Test)
    B_MCC = np.max(FIT_Test)
    Best_MCC.append(B_MCC)
    Best_MCC_Index = np.argmax(FIT_Test)
    Attr = CV[Best_MCC_Index]
    Atribute.append(Attr)
#===========================================================================================================# 
#   Best Attributes 
    
Best_Atribute_Index = np.argmax(Best_MCC)
Best_Cromosomes = Atribute[Best_Atribute_Index]
#   Best features 
Feat = X[X.columns[list(Best_Cromosomes[0])]]
Best_Features = X.columns[Feat] 





